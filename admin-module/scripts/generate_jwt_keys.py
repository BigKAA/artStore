#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—ã –∫–ª—é—á–µ–π JWT (RS256).

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á–∏ RSA –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤.
–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ./keys/ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PEM.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/generate_jwt_keys.py
    python scripts/generate_jwt_keys.py --key-size 4096
    python scripts/generate_jwt_keys.py --output-dir ./custom-keys
"""

import argparse
import os
from pathlib import Path

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa


def generate_jwt_keys(
    output_dir: str = "./keys",
    key_size: int = 2048,
    private_key_filename: str = "jwt-private.pem",
    public_key_filename: str = "jwt-public.pem",
    force: bool = False
) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—É –∫–ª—é—á–µ–π RSA –¥–ª—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    Args:
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
        key_size: –†–∞–∑–º–µ—Ä –∫–ª—é—á–∞ –≤ –±–∏—Ç–∞—Ö (2048, 3072, 4096)
        private_key_filename: –ò–º—è —Ñ–∞–π–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        public_key_filename: –ò–º—è —Ñ–∞–π–ª–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        force: –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)

    private_key_path = output_path / private_key_filename
    public_key_path = output_path / public_key_filename

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
    if not force and (private_key_path.exists() or public_key_path.exists()):
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–ª—é—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
        print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key_path}")
        print(f"   –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {public_key_path}")
        response = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏? (yes/no): ")
        if response.lower() not in ["yes", "y"]:
            print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

    print(f"üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π RSA ({key_size} –±–∏—Ç)...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=key_size,
        backend=default_backend()
    )

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    public_key = private_key.public_key()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    with open(private_key_path, "wb") as f:
        f.write(
            private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
        )
    print(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {private_key_path}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    with open(public_key_path, "wb") as f:
        f.write(
            public_key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            )
        )
    print(f"‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {public_key_path}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º)
    if os.name != "nt":
        os.chmod(private_key_path, 0o600)  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å
        os.chmod(public_key_path, 0o644)   # –í—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å
        print("üîí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")

    print("‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∑–∞—â–∏—â–µ–Ω –∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ git")
    print("   2. –û–±–Ω–æ–≤–∏—Ç–µ config.yaml —Å –ø—É—Ç—è–º–∏ –∫ –∫–ª—é—á–∞–º:")
    print(f"      private_key_path: \"{private_key_path}\"")
    print(f"      public_key_path: \"{public_key_path}\"")
    print("   3. –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ –¥—Ä—É–≥–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π RSA –¥–ª—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    )
    parser.add_argument(
        "--output-dir",
        default="./keys",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./keys)"
    )
    parser.add_argument(
        "--key-size",
        type=int,
        default=2048,
        choices=[2048, 3072, 4096],
        help="–†–∞–∑–º–µ—Ä –∫–ª—é—á–∞ –≤ –±–∏—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2048)"
    )
    parser.add_argument(
        "--private-key-name",
        default="jwt-private.pem",
        help="–ò–º—è —Ñ–∞–π–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: jwt-private.pem)"
    )
    parser.add_argument(
        "--public-key-name",
        default="jwt-public.pem",
        help="–ò–º—è —Ñ–∞–π–ª–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: jwt-public.pem)"
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )

    args = parser.parse_args()

    try:
        generate_jwt_keys(
            output_dir=args.output_dir,
            key_size=args.key_size,
            private_key_filename=args.private_key_name,
            public_key_filename=args.public_key_name,
            force=args.force
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
        exit(1)


if __name__ == "__main__":
    main()
